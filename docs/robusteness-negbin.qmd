---
title: "Robustness Checks: Negative Binomial Models"
subtitle: "The Effects of Shifting Priorities and Capacity on Elected Officials' Policy Work and Constituency Service: Evidence from a Census of Legislator Requests to U.S. Federal Agencies"
author: Devin Judge-Lord
format: 
  # pdf:
  html:
      toc: true
      code-fold: true
editor_options: 
  chunk_output_type: console
---


```{r global.options, include=FALSE}
testing = F
verification = T


# load packages 
requires <- c("tidyverse", "magrittr", # data wrangling
              "scales", # plot scales 
              "ggrepel",# plot labels
              "here", # file paths 
              "knitr", # document formatting 
              "kableExtra", # for table formatting 
              "modelsummary", # for regression tables 
              "marginaleffects", # for predictions 
              "fixest", # statistical package for fixed effects estimation 
              # MAY BE REQUIRED FOR QMD RENDERING
              "base64enc",
              "digest",
              "evaluate",
              "glue",
              "highr",
              "htmltools",
              "jsonlite",
              "markdown",
              "mime",
              "rmarkdown",
              "stringi",
              "stringr",
              "xfun",
              "yaml")
to_install <- c( requires %in% rownames(installed.packages() ) == FALSE)
if(sum(to_install>0)){
install.packages( requires[to_install], 
                  repos = "https://cloud.r-project.org/" )
}


library(modelsummary)
library(marginaleffects)
library(fixest)
library(tidyverse)
library(magrittr)
library(kableExtra)
library(ggrepel)
library(scales)

knitr::opts_chunk$set(echo = T, # code is folded 
                      cache = F, # CACHE 
                      fig.width = 4.5, 
                      fig.height = 3.5,
                      split = T,
                      fig.align = 'center', 
                      fig.path='figs/',
                      fig.retina = 6,
                      out.width = "100%",
                      warning = F, 
                      message = F)

# inline numbers round to 2, comma at thousands
inline <- function(x) {
  if (is.na(as.numeric(x))) {
    return (x)
    } else
        return (as.numeric(x) |> 
                 round(2) |>
                 format(big.mark=",") 
        )
}

knitr::knit_hooks$set(inline = inline)

# plot defaults 
library(ggplot2); theme_set(
      theme_minimal() + 
        theme(# FOR AJPS
          panel.grid = element_blank(),
          legend.position = "bottom",
          # make text black not grey 
          axis.text = element_text(color="black"),
        axis.ticks = element_line(color = "black"),
    # add space between labels and text 
     axis.title.x = element_text(margin = unit(c(5, 0, 0, 0), "mm")),
        axis.title.y = element_text(margin = unit(c(0, 5, 0, 0), "mm")),  
    plot.title = element_text(vjust = 1,
                              lineheight = 0,
                              margin = margin(0, 0, 0, 0)), # Margins (t, r, b, l)
          # END FOR AJPS 
          panel.border  = element_blank(),
          panel.grid.major.x = element_blank())
                            )
  options(
    ggplot2.continuous.color = "cividis",
    ggplot2.continuous.fill = "cividis"
  )
  scale_color_discrete <- function(...)
    scale_color_viridis_d(..., direction = -1)
  scale_fill_discrete <- function(...)
    scale_fill_viridis_d(..., direction = -1)
```

```{r html-table-formatting}
# html table formatting
kablebox <- . %>%  
  head(100) %>%
  knitr::kable() %>% 
  kableExtra::kable_styling() %>% 
  kableExtra::scroll_box(height = "200px")

kablebox_long <- . %>% 
  head(100) %>% 
  knitr::kable() %>% 
  kableExtra::kable_styling() %>% 
  kableExtra::scroll_box(height = "500px")
```


# Replication Data

```{r data}
load(here::here("data", "corr_counts.Rdata"))
## just in case it was saved as grouped data 
corr_counts %<>% ungroup()

# subset to 2007-2020
corr_counts  %<>% filter(year > 2006, year < 2021)

# New member data 
load(here::here("data", "member_data.Rdata"))

member_data <- member_data |> 
  mutate(
    member = bioname |>
      str_remove(", .*") |>
      str_to_title() |> 
      str_replace("cc", "cC"),
    member_state = paste(member, state_abbrev, sep = " (") |>
      paste0(")"),
    cqlabel = paste0("(", 
                          state_abbrev, 
                          "-", 
                          district_code, 
                          ")") |> 
           str_remove("-0")
    ) 

d <- corr_counts %>% 
  ungroup() %>% 
  mutate(Type = case_when(
    TYPE %in% c(1,2,3) ~ "Constituency\nService", 
    TYPE %in% c(4,5) ~ "Policy"), 
         type = case_when(
            TYPE == 1 ~ "Constituent (individual)",
            TYPE == 2 ~ "Constituent (corporate)",
            TYPE == 3 ~ "Constituent (501c3 or local\n government)",
            TYPE == 4 ~ "Policy (corporate)",
            TYPE == 5 ~ "Policy (general)"
         )) 

type <- d %>% 
  group_by(Type) %>% 
  summarise(n = sum(per_icpsr_chamber_year_agency_type)) %>% 
  ungroup()

percent <- function(x){
  y <- x*100 
  y %<>% round() 
  return(y)}

year_congress<- function(year){
  return(floor((year - 1787)/2))
}

d %<>% mutate(congress = year_congress(year))



dcounts <- d |> left_join(member_data)
```

---

\clearpage



```{r means}
##creating the member-level aggregate count variables

# TOTAL counts 
d <- corr_counts |>
  group_by(agency, icpsr, chamber, year) |>
  summarise(perYear = sum(per_icpsr_chamber_year_agency_type)) |> 
  ungroup()

# Constituent counts 
d_con <- corr_counts |>
  subset(TYPE %in% c(1, 2, 3)) |> 
  group_by(agency, icpsr, chamber, year) |>
  summarise(perYear_con = sum(per_icpsr_chamber_year_agency_type))

# Policy counts 
d_policy <- corr_counts |>
  subset(TYPE %in% c(4, 5)) |> 
  group_by(agency, icpsr, chamber, year) |>
  summarise(perYear_pol = sum(per_icpsr_chamber_year_agency_type))

d$perYear_con <- d_con$perYear_con
d$perYear_policy<- d_policy$perYear_pol


## Means for paper
mean_total <- mean(d$perYear)
mean_con <- mean(d$perYear_con)
mean_pol <- mean(d$perYear_policy)

## Ns
n2007_2020 <- d$perYear |> sum()
n2007_2020coded <- sum(d$perYear_con, d$perYear_policy)
n_agency <- d$agency |> unique() |> length()



# Regression table formatting for AJPS 
modelsummary_AJPS <- function(models, notes = "", center_rows = 1, ...){
  modelsummary::modelsummary(models,  
             # Custom sig stars for AJPS 
             stars = c('â€ ' = .1, '*' = .05, '**' = .01), 
             # Align coefficients by decimal for AJPS 
             align = paste0("l", paste0(rep("d", length(models)), collapse = "")), 
             add_rows = rows,               
             coef_map = cm, 
             gof_map = gm, 
             output = "tinytable",
             notes = notes) |>
    # bold header, hline bottom, aligned center
    tinytable::style_tt(i = 0:1, bold = T, line = "b",  align = "c") |>
    # stats aligned center 
    tinytable::style_tt(i = center_rows, align = "c") |> 
    # row labels left
    tinytable::style_tt(j = 1, align = "l")
} 

modelsummary <- modelsummary_AJPS

```


```{r drop-chamber-switchers}
# make icpsr year variable 
d %<>% mutate( icpsr_year = paste(icpsr, year, sep='_') )

## chamber switchers  in original data (party switchers are not an issue because they net new ICPSR ids)
chamber_switchers  <- d |> 
  distinct(icpsr_year, agency, chamber) |>
  add_count(icpsr_year, agency,  #party, 
            name = "n") |>
  filter(n > 1) |> 
  distinct(icpsr_year, chamber) |> 
  arrange(icpsr_year)

# DROP CHAMBER SWITCHERS
d %<>% filter(!icpsr_year %in% chamber_switchers$icpsr_year)

############################
# add covariates for models #
############################

# congress year converters 
congress_years<- function(congress){
  years<- c(congress*2 + 1787, congress*2 + 1788 )
  return(years)
}

year_congress<- function(year){
  return(floor((year - 1787)/2))
}

# make congress to merge with member data 
d$congress<- year_congress(d$year)

# inspect duplicates 
d <- d |> 
  ungroup() |>
  distinct() |>
  add_count(icpsr, year, agency,  #party, 
            name = "n") 

if(testing){
d |>filter(n > 1) |> distinct(icpsr, year) 
} 

# LEFT join in member data 
d <- d |>  
  ungroup() |> 
  left_join(member_data, 
            by = c('congress', 'icpsr', "chamber") ) 


## count or repeated values (chamber and party switchers)
# note that in the full data, we use the dates of letters to attribute them to the proper party or chamber at the time
# but in yearly counts, we lose this level of detail, leading to undercounts for switchers

# # inspect for duplicates 
if(testing){
d <- d |> 
  ungroup() |>
  distinct() |>
  add_count(icpsr, year, agency,  #party, 
            name = "n") 
  
d |>filter(n > 1) |> distinct(icpsr, year) 
}


```


```{r data-transformations}
# This chunk takes the minimal count data and creates legislator-level and district-level yearly count and ratio data
# These are then used to estimate the models
# the key DVs are
# - perYear = counts per year (member level and district level)
# - ratio = ratio of policy work to constituency service


####################
# TRANSFORMATIONS #  
###################

# tenure in office for experience tests 
d <- d |> 
  group_by(icpsr) |>
  mutate(
    tenure = year - first_year,
    first = ifelse(tenure==0, 1, 0),
    second = ifelse(tenure==1, 1, 0),
    third = ifelse(tenure==2, 1, 0),
    fourth = ifelse(tenure==3, 1, 0),
    fifth = ifelse(tenure==4, 1, 0),
    sixth = ifelse(tenure==5, 1, 0),
    max_year = max(tenure)
  ) 

# two-way fixed effects 
d <- d |> 
  ungroup() |> 
  mutate(
    icpsr_agency = paste(agency, icpsr, sep='_'),
    agency_year = paste(agency, year, sep='_')
  )

# indicator for whether they survived their first election 
d <- d |> 
  mutate(survive = ifelse(
    chamber =='House' & max_year>1 | chamber=='Senate' & max_year>5,
    1, 0)
  )

dcounts_tenure <- d

# Better variable names for tables
dcounts_tenure %<>% 
  mutate(Legislator = icpsr,
         Legislator_x_Agency = icpsr_agency,
         Year_x_Agency = agency_year)


#### PER DISTRICT COUNTS ######################
d %<>% mutate(decade = case_when(
  year < 2011 ~ '0', 
  year > 2010 ~ '1'))


d %<>% mutate(state_dist = case_when(
  chamber=='Senate'~ paste(state,district_code,  sep='_' ),
  chamber =='House'~ paste(paste(state, district_code, sep='_'), decade, sep='_')
))


dcounts_per_district<- d |>
  group_by(year, state_dist, icpsr, chamber, 
           tenure, first, second, third, fourth, fifth, sixth,
           state) |>
  summarise(perYear = sum(perYear),
            perYear_con = sum(perYear_con),
            perYear_policy = sum(perYear_policy)) |>
  distinct()

# rename first year as "new_member" 
dcounts_per_district %<>% 
  mutate(new_member = first)


```




## Defining Prestige Committees

All of these findings replicate with various interpretations of "prestige" committees. To measure committee prestige, we use a revealed preference
    approach--what do members think is most valuable--using party
    rules/norms that limit members to serving on only one of a small
    number of desirable committees. For House members, the "exclusive"
    committees are: Appropriations, Energy & Commerce, Financial
    Services, Rules, and Ways & Means (CRS 2022). For Senators, the
    exclusive (also called "Super A") Committees are: Appropriations,
    Armed Services, Finance, and Foreign Relations (CRS 2024).

```{r prestige}
# THE BETTER DEFINITION WE USE IN THE FINAL PAPER 
prestige_house <- c(
  "APPROPRIATIONS", #
  # "ARMED SERVICES", #
  #"BUDGET", # 
  "COMMERCE", #
  "ENERGY", #
  "FINANCIAL SERVICES", # 
  "BANKING", # 
  #"FOREIGN"
    #"INTERNATIONAL RELATIONS", # 
  # "JUDICIARY", # 
    "FINANCIAL SERVICES", # 
    "RULES", #
  "WAYS"
  ) %>% paste(collapse  = "|")# 

prestige_senate <- c(
   #"AGRICULTURE", 
   "APPROPRIATIONS", #
  "ARMED SERVICES", #
  #  "BANKING", # 
  #"BUDGET", # 
  #"COMMERCE", #
  #"ENERGY", #
  #  "NATURAL RESOURCES", # 
  #  "ENVIRONMENT", # 
   "FINANCE", #
  "FOREIGN RELATIONS") %>% paste(collapse  = "|")
  #"HOMELAND SECURITY", #
  #"JUDICIARY", # 
  # "INTELLIGENCE",
  #"RULES") #

prestige_house |> str_split("\\|") |> kable(col.names = "House `Exclusive` Prestige Committees (CRS 2022, pg 3)")
prestige_senate |> str_split("\\|") |> kable(col.names = "Senate `Super A` Prestige Committees  (CRS 2022, pg 3)")

member_data %<>% ungroup() %>% 
  mutate(prestige = ifelse(
    (chamber == "House" & str_detect(committees, prestige_house) ) | (chamber == "Senate" & str_detect(committees, prestige_senate)), 1, 0)
                    )

# INSPECT 
member_data |> drop_na(prestige) |> count(prestige) |> kable()

# Join prestige coding into main data 
dcounts_tenure %<>% left_join(member_data %>% distinct(icpsr, congress, prestige))

```




```{r}
# helper functions to plot predicted values
ggchair <- function(predicted = predicted) {
  
  predicted$chair %<>% str_replace("0", " Not\nchair") %>% str_replace("1", "Chair")
  
  predicted$presidents_party %<>% str_replace("0", "\nNot president's\nparty") %>% str_replace("1", "\nPresident's\nparty")

predicted %>%  
  ggplot() + 
  aes(x = presidents_party, 
      y = estimate, # predicted, 
      ymin = conf.low,# predicted - 1.96*std.error,
      ymax = conf.high, #predicted + 1.96*std.error,
      fill = chair,
      shape = chair,
      color = chair,
      label = chair,
      ) + 
      geom_text_repel(direction = "y", size = 3, 
                      hjust= -.25, 
                      min.segment.length = Inf, 
                      force = 2,
                      vjust = 0, 
                      check_overlap = T) + 
  geom_pointrange(position =  position_dodge(width = -.1)  )  + 
  scale_fill_viridis_d(begin = 0, end = .6, option = "cividis") +
  scale_color_viridis_d(begin = 0, end = .6, option = "cividis") +
  theme(legend.position = "none",
        axis.ticks.x = element_blank())
}


ggtenure <- function(predicted = predicted) {
  
predicted %<>%
  # drop estimates from impossible values
      group_by(rowid, 
               #predicted, std.error, 
               estimate, conf.low, conf.high,
               chair) %>% 
  mutate(sum = sum(first, second, third, fourth, fifth, sixth),
         more = ifelse(sum == 0, 1,0)) %>% 
    filter(sum < 2) %>% 
    pivot_longer(cols = c("first", "second", "third", "fourth", "fifth", "sixth", "more")) %>% 
    select(name, value) %>% 
    filter(value == 1) %>% 
    # clean up for presentation
    mutate(year_in_congress = name %>% 
             str_replace("more", "7\nor more") %>% 
             str_replace("sixth", "6") %>% 
             str_replace("fifth", "5") %>% 
             str_replace("fourth", "4") %>% 
             str_replace("third", "3") %>% 
             str_replace("second", "2") %>% 
             str_replace("first", "1") 
             ) %>% 
    ungroup()
  
# Ideally, we could plot against data, but there is so much variation that you can no longer distinguish differences in predicted values 
# predicted %<>% full_join(dcounts_tenure2 %>% mutate(predicted = NA))
  
predicted %<>% filter(chair == 0 | name %in% c("sixth", "more"))

  predicted$chair %<>% str_replace("0", " Not\nchair") %>% str_replace("1", "Chair")
  

predicted %>%  
  ungroup() %>% 
  ggplot() + 
  aes(x = year_in_congress, 
            y = estimate, # predicted, 
      ymin = conf.low,# predicted - 1.96*std.error,
      ymax = conf.high, #predicted + 1.96*std.error,
      shape = chair,
      color = chair,
      label = ifelse(year_in_congress == "6", chair, NA) ) + 
    geom_text_repel(direction = "y", size = 3,
                    min.segment.length = Inf,
                    hjust= -.15, 
                    check_overlap = T) + 
  geom_pointrange(position =  position_dodge(width = -.3)  )  + 
  scale_fill_viridis_d(begin = 0, end = .6, option = "cividis") +
  scale_color_viridis_d(begin = 0, end = .6, option = "cividis")  +
  theme(legend.position = "none")
}


# values for predictions 
# by chair and President's party
values <- tidyr::expand(dcounts_tenure,
                        agency =  "Treasury_IRS",
                        chair = chair, 
                        ranking_minority	= FALSE, 
                        prestige = TRUE, 
                        first = FALSE,
                        second = FALSE,
                        third = FALSE,
                        fourth = FALSE,
                        fifth = FALSE, 
                        sixth = FALSE,
                        Legislator_x_Agency = "Treasury_IRS_20947",
                        Year_x_Agency = "Treasury_IRS_2015",
                        Legislator =  "20947",
                        Year =  "2015",
                        majority = TRUE,
                        presidents_party = presidents_party
                   ) %>% 
  drop_na(majority, chair)

# by year 
values_tenure <- tidyr::expand(dcounts_tenure,
                        agency =  "Treasury_IRS",
                        chair = chair, 
                        ranking_minority	= FALSE, 
                        prestige = TRUE, 
                        first = first,
                        second = second,
                        third = third,
                        fourth = fourth,
                        fifth = fifth, 
                        sixth = sixth,
                        Legislator_x_Agency =  "Treasury_IRS_20947",
                        Year_x_Agency =  "Treasury_IRS_2015",
                        Legislator =  "20947",
                        Year =  "2015",
                        majority = TRUE,
                        presidents_party = TRUE
                   ) %>% 
  drop_na(chair)
```

---

\clearpage


# Model Results: Counts per member per year


For ease of interpretation, the manuscript discusses linear response models estimated above. However, Poisson or Negative Binomial link functions are better models for count data. Indeed, all of the results presented in the paper a stronger when we estimate Poisson or Negative Binomial models. Thus, the models presented in the manuscript are more conservative tests. 

Clustering standard errors at the legislator level.

We use `fixest::fenegbin` here. 

```{r cm}
# directory to store model objects 
if (!dir.exists(here::here("models"))) {dir.create(here::here("models"))}


# Coef Map
cm = c("chair" = "Committee Chair",
       "ranking_minority" = "Ranking Member",
       "prestigeR2" = "Prestige Committee (R2)",
       "prestigeOLD" = "Prestige Committee (Old)",
       "prestige" = "Prestige Committee",
       "new_member" = "New Member", 
       "new_senator" = " New Senator in Delegation",
       "new_one" = " New Member in Delegation",
       "new_proportion" = " New Proportion in Delegation",
       "new_member:same_party" = " New Member x Same Party", 
       "first" = "First Year",
       "second" = "Second Year",
       "third" = "Third Year",
       "fourth" = "Fourth Year",
       "fifth" = "Fifth Year",
       "sixth" = "Sixth Year",
       "same_party:second" = "Second Year x Same Party",
       "same_party:third" = "Third Year x Same Party",
       "same_party:fourth" = "Fourth Year x Same Party",
       "same_party:fifth" = "Fifth Year x Same Party",
       "same_party:sixth" = "Sixth Year x Same Party",
       "same_party" = "Same Party",
       "majority" = "Majority",
       "presidents_party" = "President's party",
       "Legislator" = "Legislator", 
       "Agency" = "Agency",
       "Num.Obs." = "Observations"
       )

# FORMATTING FOR AJPS 
cmAJPS <- cm |> str_to_sentence()
names(cmAJPS) <- names(cm)
cm <- cmAJPS
# END FORMATTING FOR AJPS 

# set fixed effects mapping 
setFixest_dict(cm)

format_n <- function(x) format(round(x, 3), big.mark=",") # this works
f <- function(x) stringr::str_replace(x, "[A-z]", "âœ“") #FIXME not sure why this is not working

gm <- list(
  list("raw" = "nobs", "clean" = "Observations", "fmt" = format_n),
    list("raw" = "FE: Year_x_Agency", "clean" = "Year x agency fixed effects", "fmt" = f),
      list("raw" = "FE: Legislator_x_Agency", "clean" = "Legislator x agency fixed effects", "fmt" = f),
  list("raw" = "FE: icpsr_agency", "clean" = "Legislator-agency fixed effects", "fmt" = f),
       list("raw" = "FE: District", "clean" = "District fixed effects", "fmt" = f),
       list("raw" = "FE: Year", "clean" = "Year fixed effects", "fmt" = f),
       list("raw" = "FE: Legislator.*x.*Agency", "clean" = "Legislator x agency fixed effects", "fmt" = f),
        list("raw" = "FE: Year.*x.*Agency", "clean" = "Year x agency fixed effects", "fmt" = f),
       list("raw" = "FE: Legislator", "clean" = "Legislator fixed effects", "fmt" = f)
  )
```


---

## Total Letters 

### Member-level Coefficient Plots

- Figures: `figs/negbin-m-total-[1:4].png`

```{r}
#| label: "negbin-m-total"
#| fig-cap: "figs/negbin-m-total-[1:4].png"
#| layout-ncol: 2
#| fig-height: 4.5
#| fig-subcap: 
#|   - "1"
#|   - "2"
#|   - "3"
#|   - "4"
#| out-width: "100%"
#| fig-show: "hold"

# paper table 2
# Model 1 
# cross-sectional 
m_total_cross <-fenegbin (perYear ~ 
                         chair + ranking_minority + prestige + 
                    first + second + third + fourth + fifth + sixth + 
                    majority + presidents_party | Year_x_Agency,
                    cluster = "Legislator", 
           data = dcounts_tenure)

if(testing){modelsummary::modelsummary(m_total_cross)}

coefplot(m_total_cross, horiz = T, drop = "(Intercept)|.theta") 



# Model 2
m_total_dnd <-fenegbin (perYear ~ 
                       chair + ranking_minority + prestige + 
                    first + second + third + fourth + fifth + sixth + 
                    majority + presidents_party | Year_x_Agency + Legislator_x_Agency, 
                    cluster = "Legislator",
                    # ALT vcov = hetero ~ ssc(cluster.adj = TRUE),
           data = dcounts_tenure)

if(testing){modelsummary::modelsummary(m_total_dnd)}

coefplot(m_total_dnd, horiz = T) 


# 3
m_total_2nd <-fenegbin (perYear ~ 
                       chair + ranking_minority + prestige + 
                    first + second + third + fourth + fifth + sixth + 
                    majority + presidents_party | Year_x_Agency + Legislator_x_Agency, 
                    cluster = "Legislator", 
           data = dcounts_tenure %>% filter(survive == 1))

if(testing){modelsummary::modelsummary(m_total_2nd)}
coefplot(m_total_2nd, horiz = T) 


# 4
m_logtotal_dnd <-fenegbin (log(perYear + 1) ~ 
                          chair + ranking_minority + prestige + 
                    first + second + third + fourth + fifth + sixth + 
                    majority + presidents_party | Year_x_Agency + Legislator_x_Agency, 
                    cluster = "Legislator", 
           data = dcounts_tenure)

if(testing){modelsummary::modelsummary(m_logtotal_dnd)}

coefplot(m_logtotal_dnd, horiz = T) 


```

### Total Letters Table 

- Models: `models/models_total_negbin.Rdata` 


```{r models_total}
models_total <- list(
  "(1)" = m_total_cross,
  "(2)" = m_total_dnd,
  "(3)" =  m_total_2nd,
  "(4)" = m_logtotal_dnd
)

rows <- tibble(
  term = c("Dependent variable", 
           "Majority",
           "President's party",
           "All legislators", 
           "Served at least 2nd term"),
  `(1)` = c("Count", "âœ“", "âœ“", "âœ“", ""),
  `(2)` =c("Count", "âœ“", "âœ“", "âœ“", ""),
  `(3)` = c("Count", "âœ“","âœ“","", "âœ“"),
  `(4)` = c("Log(Count+1)","âœ“","âœ“", "âœ“", "") 
)

rows <- tibble(
  term = c("Dependent variable", 
           #"Majority",
           #"President's party",
           "All legislators", 
           "Served at least 2nd term"),
  `(1)` = c("Count", "âœ“", ""),
  `(2)` =c("Count", "âœ“", ""),
  `(3)` = c("Count","", "âœ“"),
  `(4)` = c("Log(Count+1)", "âœ“", "") 
)

attr(rows, 'position') <- c(0, 20,21,22,23)

attr(rows, 'position') <- c(0, 24,25)


# HTML
modelsummary(models_total,
             notes = list("Robust standard errors in parentheses, clustered by legislator.",
                          "This table shows estimates of the effect of institutional power on levels of constituency service. All coefficients represent the average additional requests per year per agency; per legislator, per year effects are simply these coefficients times the number of agencies in the data.")) 

beta <- m_total_dnd$coefficients %>%
  round(3) %>% 
  as_tibble(rownames = "beta") %>% 
  pivot_wider(names_from = beta)

se <- m_total_dnd$se %>%
  round(3) %>% as_tibble(rownames = "se") %>%
  pivot_wider(names_from = se)

save(models_total, rows, cm, gm,  beta, se,
     file = here::here("models", "models_total_negbin.Rdata"))


if(testing){
rows <- tibble(
  term = c("Dependent variable"),
  `(1)` = c("Count"),
  `(2)` =c("Count"),
  `(3)` = c("Count"),
  `(4)` = c("Log(Count+1)") 
)

attr(rows, 'position') <- c(0)


modelsummary::modelsummary(models_total,  
             # Custom sig stars for AJPS 
             #stars = c('â€ ' = .1, '*' = .05, '**' = .01), 
             # Align coefficients by decimal for AJPS 
             #align = paste0("l", paste0(rep("d", length(models)), collapse = "")), 
             add_rows = rows,               
             #coef_map = cm, 
             #gof_map = gm, 
             #output = "tinytable",
             notes = "") 
}
```


### Total Letters Predictions 

- Figures: `figs/negbin-m-total-predicted-[1:4].png`


```{r}
#| label: "negbin-m-total-predicted"
#| fig-cap: "figs/negbin-m-total-predicted"
#| layout-ncol: 2
#| fig-height: 3
#| fig-subcap: 
#|   - "1"
#|   - "2"
#|   - "3"
#|   - "4"
#| out-width: "100%"
#| fig-show: "hold"


predicted <- predictions(m_total_cross,
                         newdata = values)

# Cross-sectional predictions
predicted %>%
    mutate(estimate = estimate*n_agency, 
         conf.high = conf.high*n_agency, conf.low = conf.low*n_agency) %>%  
  ggchair() + 
  labs(#title =  "", # "Predicted total letters per year\n(cross-sectional)",
       x = "",
       y = "Predicted total letters per year",
       fill = "",
       color = "",
       shape = "") 

# by tenure
predicted <- predictions(m_total_cross,
                         newdata = values_tenure)

predicted %>%
    mutate(estimate = estimate*n_agency, 
         conf.high = conf.high*n_agency, conf.low = conf.low*n_agency) %>% 
ggtenure() +
  labs(#title =  "", # "Predicted total letters per year\n(cross-sectional)",
       x = "Years serving in Congress",
       y = "      Predicted letters per year",
       fill = "",
       color = "",
       shape = "") 


# diff in diff 
predicted <- predictions(m_total_dnd,
                         newdata = values)


# Predictions by Chair and President's Party
predicted %>%
    mutate(estimate = estimate*n_agency, #predicted*n_agency,
         conf.high = conf.high*n_agency, conf.low = conf.low*n_agency) %>% # std.error = std.error*n_agency)) %>%
  ggchair() + 
  labs(#title =  "", # "Predicted total letters per year\nDifference in Differences (Within-Legislator)",
       x = "",
       y = "  Predicted letters per year",
       fill = "",
       color = "",
       shape = "") 

# by tenure
predicted2 <- predictions(m_total_dnd,
                         newdata = values_tenure)

predicted2 %>%
    mutate(estimate = estimate*n_agency, #predicted*n_agency,
         conf.high = conf.high*n_agency, conf.low = conf.low*n_agency) %>%  # std.error = std.error*n_agency) %>%
ggtenure() +
    geom_line(aes(x = as.numeric(year_in_congress %>% str_sub(1,1) %>% str_replace("N", "1")))) + 
  labs(#title =  "", # "Predicted total letters per year\nDifference in Differences (Within-Legislator)",
       x = "Years serving in Congress",
       y = "  Predicted letters per year",
       fill = "",
       color = "",
       shape = "") 
```



\clearpage


## Constituency Service

### Member-level Constituency Service Coefficient Plots


DV: Only letters coded as constituency service letters

- Figures: `figs/negbin-m-con-[1:4].png`

```{r}
#| label: "negbin-m-con"
#| fig-cap: "figs/negbin-m-con-[1:4].png"
#| layout-ncol: 2
#| fig-height: 4.5
#| fig-subcap: 
#|   - "1"
#|   - "2"
#|   - "3"
#|   - "4"
#| out-width: "100%"
#| fig-show: "hold"


m_con_cross <-fenegbin (perYear_con ~ 
                       chair + ranking_minority + prestige + 
                    first + second + third + fourth + fifth + sixth + 
                    majority + presidents_party | Year_x_Agency,
                    cluster = "Legislator", 
           data = dcounts_tenure)

if(testing){modelsummary::modelsummary(m_con_cross)}

coefplot(m_con_cross, horiz = T, drop = "(Intercept)|.theta") 



# 2
m_con_dnd <-fenegbin (perYear_con ~ 
                     chair + ranking_minority + prestige + 
                    first + second + third + fourth + fifth + sixth + 
                    majority + presidents_party | Year_x_Agency + Legislator_x_Agency, 
                    cluster = "Legislator",
           data = dcounts_tenure)

if(testing){modelsummary::modelsummary(m_con_dnd)}
coefplot(m_con_dnd, horiz = T) 


# 3
m_con_2nd <-fenegbin (perYear_con ~ 
                     chair + ranking_minority + prestige + 
                    first + second + third + fourth + fifth + sixth + 
                    majority + presidents_party | Year_x_Agency + Legislator_x_Agency, 
                    cluster = "Legislator", 
           data = dcounts_tenure %>% filter(survive == 1))

if(testing){modelsummary::modelsummary(m_con_2nd)}

coefplot(m_con_2nd, horiz = T) 


# 4
m_logcon_dnd <-fenegbin (log(perYear_con + 1) ~ 
                        chair + ranking_minority + prestige + 
                    first + second + third + fourth + fifth + sixth + 
                    majority + presidents_party | Year_x_Agency + Legislator_x_Agency, 
                    cluster = "Legislator", 
           data = dcounts_tenure)

if(testing){modelsummary::modelsummary(m_logcon_dnd)}

coefplot(m_logcon_dnd, horiz = T) 
```

### Constituency Service Table

- Models: `models/models_con_negbin.Rdata` 


```{r models_con}
models_con <- list(
  "(1)" = m_con_cross,
  "(2)" = m_con_dnd,
  "(3)" =  m_con_2nd,
  "(4)" = m_logcon_dnd
)

beta <- m_con_dnd$coefficients %>%round(3) %>% as_tibble(rownames = "beta") %>% pivot_wider(names_from = beta)

se <- m_con_dnd$se %>%round(3) %>% as_tibble(rownames = "se") %>% pivot_wider(names_from = se)

save(models_con, rows, cm, gm,  beta, se,
     file = here::here("models", "models_con_negbin.Rdata"))
```


### Constituency Service Predictions 

- Figures: `figs/negbin-m-con-predicted-[1:4].png`

```{r}
#| label: "negbin-m-con-predicted"
#| fig-cap: "figs/negbin-m-con-predicted"
#| layout-ncol: 2
#| fig-height: 3
#| fig-subcap: 
#|   - "1"
#|   - "2"
#|   - "3"
#|   - "4"
#| out-width: "100%"
#| fig-show: "hold"


# Cross-sectional predictions:
predicted <- predictions(m_con_cross,
                         newdata = values)


# A plot by chair & presidents' party
predicted %>%
  mutate(estimate = estimate*n_agency, #predicted*n_agency,
         conf.high = conf.high*n_agency, conf.low = conf.low*n_agency) %>% # std.error = std.error*n_agency)) %>%
  ggchair() + 
  labs(#title =  "", # "Predicted Constituency Service Letters per year\n(cross-sectional)",
       x = "",
       y = "  Predicted letters per year",
       fill = "",
       color = "",
       shape = "") 

# by tenure
predicted <- predictions(m_con_cross,
                         newdata = values_tenure)

predicted %>%
    mutate(estimate = estimate*n_agency, #predicted*n_agency,
         conf.high = conf.high*n_agency, conf.low = conf.low*n_agency) %>%  # std.error = std.error*n_agency) %>%
ggtenure() +
   # geom_line(aes(x = as.numeric(year_in_congress %>% str_sub(1,1)))) + 
  labs(#title =  "", # "Predicted Constituency Service Letters Per year\n(Cross Sectional)",
       x = "Years serving in Congress",
       y = "  Predicted letters per year",
       fill = "",
       color = "",
       shape = "") 



# Diff in diff predictions 
predicted <- predictions(m_con_dnd,
                         newdata = values)


# diff in diff plot
predicted %>%
  mutate(estimate = estimate*n_agency, #predicted*n_agency,
         conf.high = conf.high*n_agency, conf.low = conf.low*n_agency) %>% # std.error = std.error*n_agency)) %>%
  ggchair() + 
  labs(#title =  "", # "Predicted Constituency Service Letters per year\nDifference in Differences (Within-Legislator)",
       x = "",
       y = "  Predicted letters per year",
       fill = "",
       color = "",
       shape = "") 

# by tenure
predicted <- predictions(m_con_dnd,
                         newdata = values_tenure)

predicted %>%
    mutate(estimate = estimate*n_agency, #predicted*n_agency,
         conf.high = conf.high*n_agency, conf.low = conf.low*n_agency) %>%  # std.error = std.error*n_agency) %>%
ggtenure() +
    geom_line(aes(x = as.numeric(year_in_congress %>% str_sub(1,1)))) + 
  labs(#title =  "", # "Predicted Constituency Service Letters Per year\nDifference in Differences (Within-Legislator)",
       x = "Years serving in Congress",
       y = "  Predicted letters per year",
       fill = "",
       color = "",
       shape = "") 
```


\clearpage

## Policy Work

### Member-level Policy Work Coefficient Plots

Only using letters coded as constituent letters 

- Figures: `figs/negbin-m-policy-[1:4].png`

```{r}
#| label: "negbin-m-policy"
#| fig-cap: "figs/negbin-m-policy-[1:4].png"
#| layout-ncol: 2
#| fig-height: 4.5
#| fig-subcap: 
#|   - "1"
#|   - "2"
#|   - "3"
#|   - "4"
#| out-width: "100%"
#| fig-show: "hold"

m_policy_cross <-fenegbin (perYear_policy ~ 
                          chair + ranking_minority + prestige + 
                    first + second + third + fourth + fifth + sixth + 
                    majority +  presidents_party | Year_x_Agency,
                    cluster = "Legislator", 
           data = dcounts_tenure)

if(testing){modelsummary::modelsummary(m_policy_cross)}

coefplot(m_policy_cross, horiz = T, drop = "(Intercept)|.theta") 



# 2
m_policy_dnd <-fenegbin (perYear_policy ~ 
                        chair + ranking_minority + prestige + 
                    first + second + third + fourth + fifth + sixth + 
                    majority + presidents_party | Year_x_Agency + Legislator_x_Agency, 
                    cluster = "Legislator",
           data = dcounts_tenure)

if(testing){modelsummary::modelsummary(m_policy_dnd)}
coefplot(m_policy_dnd, horiz = T) 


# 3
m_policy_2nd <-fenegbin (perYear_policy ~ 
                        chair + ranking_minority + prestige + 
                    first + second + third + fourth + fifth + sixth + 
                    majority + presidents_party | Year_x_Agency + Legislator_x_Agency, 
                    cluster = "Legislator", 
           data = dcounts_tenure %>% filter(survive == 1))

if(testing){modelsummary::modelsummary(m_tenure_2nd)}
coefplot(m_policy_2nd, horiz = T) 


# 4
m_logcon_dnd <-fenegbin (log(perYear_policy + 1) ~ 
                        chair + ranking_minority + prestige + 
                    first + second + third + fourth + fifth + sixth + 
                    majority + presidents_party | Year_x_Agency + Legislator_x_Agency, 
                    cluster = "Legislator", 
           data = dcounts_tenure)

if(testing){modelsummary::modelsummary(m_logcon_dnd)}

coefplot(m_logcon_dnd, horiz = T) 
```

### Policy Work Table

- Models: `models/models_policy_negbin.Rdata` 

```{r models_policy}
models_policy <- list(
  "(1)" = m_policy_cross,
  "(2)" = m_policy_dnd,
  "(3)" =  m_policy_2nd,
  "(4)" = m_logcon_dnd
)

modelsummary(models_policy)

beta <- m_policy_dnd$coefficients %>%round(3) %>% as_tibble(rownames = "beta") %>% pivot_wider(names_from = beta)

se <- m_policy_dnd$se %>%round(3) %>% as_tibble(rownames = "se") %>% pivot_wider(names_from = se)

save(models_policy, rows, cm, gm,  beta, se,
     file = here::here("models", "models_policy_negbin.Rdata"))
```


### Policy Work Predictions 

- Figures: `figs/negbin-m-policy-predicted-[1:4].png`

```{r}
#| label: "negbin-m-policy-predicted"
#| fig-cap: "figs/negbin-m-policy-predicted"
#| layout-ncol: 2
#| fig-height: 3
#| fig-subcap: 
#|   - "1"
#|   - "2"
#|   - "3"
#|   - "4"
#| out-width: "100%"
#| fig-show: "hold"

predicted <- predictions(m_policy_cross,
                         newdata = values)

# Cross-sectional predictions
predicted %>%
  mutate(estimate = estimate*n_agency, #predicted*n_agency,
         conf.high = conf.high*n_agency, conf.low = conf.low*n_agency) %>% # std.error = std.error*n_agency)) %>%
  ggchair() +
  labs(#title =  "", # "Predicted Policy Letters per year\n(cross-sectional)",
       x = "",
       y = "  Predicted letters per year",
       fill = "",
       color = "",
       shape = "") 

# by tenure
predicted <- predictions(m_policy_cross,
                         newdata = values_tenure)

predicted %>%
    mutate(estimate = estimate*n_agency, #predicted*n_agency,
         conf.high = conf.high*n_agency, conf.low = conf.low*n_agency) %>%  # std.error = std.error*n_agency) %>%
ggtenure() +
  labs(#title =  "", # "Predicted Policy Letters Per year\n(Cross Sectional)",
       x = "Years serving in Congress",
       y = "  Predicted letters per year",
       fill = "",
       color = "",
       shape = "") 


# Predictions for diff in diff plot 
predicted <- predictions(m_policy_dnd,
                         newdata = values)


# diff in diff plot
predicted %>%
  mutate(estimate = estimate*n_agency, #predicted*n_agency,
         conf.high = conf.high*n_agency, conf.low = conf.low*n_agency) %>% # std.error = std.error*n_agency)) %>%
  ggchair() +
  labs(#title =  "", # "Predicted Policy Letters per year\nDifference in Differences (Within-Legislator)",
       x = "",
       y = "  Predicted letters per year",
       fill = "",
       color = "",
       shape = "")  

# by tenure
predicted <- predictions(m_policy_dnd,
                         newdata = values_tenure)

predicted %>%
    mutate(estimate = estimate*n_agency, #predicted*n_agency,
         conf.high = conf.high*n_agency, conf.low = conf.low*n_agency) %>%  # std.error = std.error*n_agency) %>%
ggtenure() +
    geom_line(aes(x = as.numeric(year_in_congress %>% str_sub(1,1)))) + 
  labs(#title =  "", # "Predicted Policy Letters Per year\nDifference in Differences (Within-Legislator)",
       x = "Years serving in Congress",
       y = "  Predicted letters per year",
       fill = "",
       color = "",
       shape = "") 


```


## Total + Constituency

### Total + Constituency Service Table

- Models: `models/models_total_con_negbin.Rdata` 

```{r models_total_con}
models_total_con <- list(
  "(1)" = m_total_cross,
  "(2)" = m_total_dnd,
  "(3)" =  m_con_cross,
  "(4)" = m_con_dnd
)


rows <- tibble(
  term = c("Dependent variable"),
  `(1)` = c("Total Count"),
  `(2)` =c("Total Count"),
  `(3)` = c("Constituent Service"),
  `(4)` = c("Constituent Service") 
)

attr(rows, 'position') <- c(0)

modelsummary(models_total_con)

beta_total <- m_total_dnd$coefficients %>%round(3) %>% as_tibble(rownames = "beta") %>% pivot_wider(names_from = beta)

beta_con <- m_con_dnd$coefficients %>%round(3) %>% as_tibble(rownames = "beta") %>% pivot_wider(names_from = beta)

se_total <- m_total_dnd$se %>%round(3) %>% as_tibble(rownames = "se") %>% pivot_wider(names_from = se) |> mutate_all(as.numeric)

se_con <- m_con_dnd$se %>%round(3) %>% as_tibble(rownames = "se") %>% pivot_wider(names_from = se)|> mutate_all(as.numeric)

save(models_total_con, rows, cm, gm, beta_total, se_total, beta_con, se_con,
     file = here::here("models", "models_total_con_negbin.Rdata"))
```



\clearpage



# Model Results: Per District

## Data

<!--
#TODO deal with chamber switchers ? or maybe we don't need to since everything is calculated grouped at chamber level?
# count(member_data, bioname, icpsr, congress, sort = T) |> filter(n >1)
-->

The main district-level models in the paper focus on estimating the effect of legislator experience by leveraging turnover within districts. We compare the service that a district receives before and after electing a new legislator and in the following years as legislators gain experience in office.

### `Same party` lookup table 

As a robustness check, we replicate our within-district results using a subset of district-year-count observations where turnover in a district allows us to assess the partisanship of the prior member holding that seat. We interact an indicator of whether the prior member was of the `same party` with all other indicators (i.e., whether the member is new, serving in years 1-6, or serving longer than 6 years). We compare the service that a district receives before and after electing a new legislator and, in the following years, accounting for whether that member is of the same party. However, a structural constraint of the data means that this robustness check is limited to observations where turnover *within* a redistricting cycle gives us a measure of whether the legislator replaced a member of the same party or of another party. 

The table below accounts for redistricting by treating post-redistricting districts as new entities, not the same district as the one with the same number prior to redistricting (i.e., we do NOT count cases where a district elects someone of the same or different party as the district with the same number had before redistricting). Since some states completely re-number their districts, there is no way to be sure that a new District 4 has any relationship to the District 4 under the previous redistricting map (though it often may have significant overlap) without creating some spatial measure of the percent of shared census tracts, or something like that, which we do not attempt. 

Many NAs exist for the `same party` variable because we only observe it when there is turnover *within* a redistricting cycle. Seats that do not turn over for an entire cycle (e.g., 2002-2012) are FALSE ("0") for "new member" and have no value for "same party." Other districts are NA until there is turnover. Thus, adding "same party" causes significant data loss due to NAs. 

- Specifically, we go from 7666 to 2822 observations when including `same_party` in the models below. 

To measure turnover in the Senate where "districts" have two members, we code `same party` as FALSE if there is a change in the partisanship of a state's Senate delegation. This captures the parallel dynamic of single-member House districts. If there are two Democrats and one is replaced by a Republican, the `same party` is FALSE. If there are two Democrats and a Democrat is elected, the `same party` is TRUE. If there are a Democrat senator and a Republican senator representing a state, and the Democrat is replaced by a Republican, `same_party` is FALSE. As per the VoteView convention, Senate delegations are District "0" (e.g., "alabama_0"). Split Senate delegations appear as "Democratic Party;Republican Party" in the table below.

```{r crosswalk}
# year congress crosswalk 
year_congress <- dcounts_tenure %>% distinct(year, congress)


# Add Congress variable 
dcounts_per_district %<>% 
  ungroup() %>% 
  # Add Congress variable 
  left_join(year_congress)

member_data %<>% left_join(year_congress) %>% arrange(icpsr, year)

duplicates <-distinct(dcounts_per_district, icpsr, chamber, congress, state, state_dist, new_member)  %>% count(icpsr, chamber, congress, state_dist) %>% filter(n > 1) 

# Because members of the house are new one year and not the other, we can't do "new" at the Congress level 
# inner_join(duplicates, dcounts_per_district)

# make a variable for the prior seat holder party 
party_crosswalk <- member_data  %>% 
  ungroup() %>% 
  # add new member and state_dist (accounting for redistricting)
  left_join(distinct(dcounts_per_district, icpsr, chamber, congress, state, state_dist, new_member, year)) %>% 
  # Begin at 2000 census redistricting 
  filter(year > 2001) %>% 
  # Make additional new member and state_dist to fill in NAs with "0" (i.e., 2002-2012 redistricting cycle )
  mutate(state_dist2 = paste(state, district_code, "0", sep = "_") |> 
           str_replace("0_0", "0"),
         state_dist = coalesce(state_dist, state_dist2)) %>% 
  group_by(state_dist, chamber, year) %>% 
  # combine ICPSR IDS for senators to get the senate delegation to know if it changed 
  arrange(icpsr) |> # Make sure they are in the same order 
  mutate(icpsr = unique(icpsr) |> paste(collapse = ";")) %>% # collapse senate ICPSR
  ungroup() %>% 
  group_by(state_dist, chamber) |> 
  arrange(year) |> 
  mutate(
         lag_icpsr = dplyr::lag(icpsr),
         new_member2 = icpsr != lag_icpsr,
         new_member =  coalesce(new_member, as.numeric(new_member2))) %>% 
  distinct(year, congress, state_dist, state, district_code, party, new_member #, new_member2, icpsr, lag_icpsr        
           ) %>% #FIXME DROPPING OBS HERE
  # # for Senate, capture mixed delegations 
  group_by(state_dist, year) %>% 
  arrange(party) %>% 
  mutate(state_dist_party = unique(party) |> paste(collapse = ";")) %>% 
  ungroup() %>% 
  # state_dist is missing for some obs in member_data, so here is a backup that does not account for redistricting. If we end up needing this, we should correct it to the districts accounting for redistricting
  mutate(state_dist2 = paste(state, district_code, sep = "_")) %>% 
  distinct(congress, state_dist,  state_dist_party, new_member, year #, new_member2, icpsr, lag_icpsr
  ) %>% 
  arrange(state_dist, year) %>% 
  # group by icpsr 
  group_by(state_dist) %>% 
  # create lag party var and fill it in for that member's tenure 
  mutate(lag_p = dplyr::lag(state_dist_party), 
         same_party = state_dist_party == lag_p,
         same_party = ifelse(new_member, 
                same_party,
                             NA )) %>% 
  tidyr::fill(same_party, .direction = "down")  %>% 
  ungroup()

# LOOK FOR MISSING OBS BY CONGRESS 
#member_data |> count(congress)
#party_crosswalk |> ungroup() |> count(congress, is.na(state_dist))
#party_crosswalk |> ungroup() |> filter(is.na(state_dist), congress > 109)


party_crosswalk  |>  
  select(year, state_dist, state_dist_party, lag_p, same_party, new_member)  |> 
  kablebox_long()

```



```{r add-crosswalk}

# Add same_party variable to district counts data 
dcounts_per_district %<>% 
  left_join(party_crosswalk ) %>% 
  arrange(state_dist, congress) %>% 
  ungroup()
  
dcounts_per_district |> 
  count(same_party) |> 
  kablebox()
# 


# dcounts_per_district |> filter(chamber == "House") |>   select(icpsr, state_dist, year, state_dist_party, lag_p, same_party, new_member)   |> kablebox()

dcounts_per_district %<>% mutate(same_party = as.numeric(same_party))
```


## Total Letters per District

The main results showing that replacing a more experienced legislator with a new legislator yields a substantial decrease in service to the district are robust to interacting all variables with the `same_party` variable. 
Cross-sectional effects get larger but more uncertain when data are subset to district years after turnover (as required for the `same_party` variable). Within-district effects become more uncertain, likely due to the much smaller number of observations where `same_party` can be observed. 


### Total District-level Coefficient Plots

Figures: `figs/negbin-m-district-[1:4].png`

1. cross-sectional 
2. cross-sectional with same-party variable 
3. diff-in-diff
4. diff-in-diff with same party variable

```{r}
#| layout-ncol: 2
#| fig-height: 4.5
#| fig-cap: "figs/negbin-m-district-[1:4].png"
#| fig-subcap: 
#|   - "1"
#|   - "2"
#|   - "3"
#|   - "4"
#| out-width: "100%"
#| label: "negbin-m-district"
#| fig-show: "hold"

# modify var names for presentation 
dcounts_per_district %<>% 
  mutate(same_party = as.numeric(same_party),
         Legislator = icpsr,
         District = state_dist,
         Year = year)

m_district_cross <- fenegbin(perYear ~
  new_member + 
  second + third + fourth + fifth + sixth | Year,
cluster = "District",
data = dcounts_per_district)

if(testing){modelsummary::modelsummary(m_district_cross)}

coefplot(m_district_cross, horiz = T, drop = "(Intercept)|.theta", sub = "Reference = A member serving >6 years") 


m_district_cross_party <- fenegbin(perYear ~
  new_member*same_party + 
  second*same_party + third*same_party + fourth*same_party + fifth*same_party + sixth*same_party | Year,
cluster = "District",
data = dcounts_per_district)

if(testing){modelsummary::modelsummary(m_district_cross)}

coefplot(m_district_cross_party, horiz = T, drop = "(Intercept)|.theta", sub = "Reference = A member serving >6 years") 


# Diff in diff
m_district_dnd <- fenegbin(perYear ~
  new_member + #same_party + 
  second + third + fourth + fifth + sixth | 
    District + Year,
cluster = "District",
data = dcounts_per_district )

coefplot(m_district_dnd, horiz = T, drop = "(Intercept)|.theta", sub = "Reference = A member serving >6 years") 

# Diff in diff
m_district_dnd_party <- fenegbin(perYear ~
  new_member*same_party + 
  second*same_party + third*same_party + fourth*same_party + fifth*same_party + sixth*same_party | 
    District + Year,
cluster = "District",
data = dcounts_per_district )

coefplot(m_district_dnd_party, horiz = T, drop = "(Intercept)|.theta", sub = "Reference = A member serving >6 years") 



# Diff in diff
m_district_dnd_house <- fenegbin(perYear ~
  new_member + #same_party + 
  second + third + fourth + fifth + sixth | 
    District + Year,
cluster = "District",
data = dcounts_per_district |> filter(chamber == "House"))


# Diff in diff + party change var 
m_district_dnd_house_party <- fenegbin(perYear ~
  new_member*same_party + 
  second*same_party + third*same_party + fourth*same_party + fifth*same_party + sixth*same_party | 
    District + Year,
cluster = "District",
data = dcounts_per_district |> filter(chamber == "House"))

# Diff in diff
m_district_dnd_senate <- fenegbin(perYear ~
  new_member + #same_party + 
  second + third + fourth + fifth + sixth | 
    District + Year,
cluster = "District",
data = dcounts_per_district |> filter(chamber == "Senate"))


# Diff in diff + party change var 
m_district_dnd_senate_party <- fenegbin(perYear ~
  new_member*same_party + 
  second*same_party + third*same_party + fourth*same_party + fifth*same_party + sixth*same_party | 
    District + Year,
cluster = "District",
data = dcounts_per_district |> filter(chamber == "Senate"))

```

### Total Per District Tables

- Models: `models/models_district_negbin.Rdata` 


```{r models_district}
models_district <- list(
  "(1)" = m_district_cross,
  "(2)" = m_district_dnd,
  "(3)" = m_district_dnd_house,
  "(4)" = m_district_dnd_senate
)


rows <- tibble(
  term = c("Dependent variable", 
           "All districts",
           "House only",
           "Senate only"),
  `(1)` = c("Per year", 
            "âœ“", 
            "", 
            ""),
  `(2)` =c("Per year", 
           "âœ“", 
            "", 
            ""),
    `(3)` = c("Per year", 
            "", 
            "âœ“", 
            ""),
  `(4)` =c("Per year", 
           #"âœ“", 
           "", 
            "", 
            "âœ“")
)



# Check marks for controls 
attr(rows, 'position') <- c(0, 14:16)



modelsummary(models_district,
             notes = list("Robust standard errors in parentheses, clustered by district.") )

beta <- m_district_dnd$coefficients %>%round(3) %>% as_tibble(rownames = "beta") %>% pivot_wider(names_from = beta)

beta_cross <- m_district_dnd$coefficients %>%round(3) %>% as_tibble(rownames = "beta") %>% pivot_wider(names_from = beta)


se <- m_district_dnd$se %>%round(3) %>% as_tibble(rownames = "se") %>% pivot_wider(names_from = se)

save(models_district, rows, cm, gm,  beta, se,
     file = here::here("models", "models_district_negbin.Rdata"))
```

- Models: `models/models_district_party_negbin.Rdata` 

```{r models_district_party}

models_district_party <- list(
  "(1)" = m_district_cross_party,
  "(2)" = m_district_dnd_party,
  "(3)" = m_district_dnd_house_party,
  "(4)" = m_district_dnd_senate_party
)


# Check marks for controls 
attr(rows, 'position') <- c(0, 28:31)



modelsummary(models_district_party, 
             notes = list("Robust standard errors in parentheses, clustered by district.") )

save(models_district_party, rows, cm, gm,  beta, se,
     file = here::here("models", "models_district_party_negbin.Rdata"))
```


### Total Per District Predictions 



- Figures: `figs/negbin-m-district-predicted-[1:4].png`

```{r}
#| layout-ncol: 2
#| fig-height: 3
#| fig-cap: "figs/negbin-m-district-predicted-[1:4].png"
#| fig-subcap: 
#|   - "1"
#|   - "2"
#|   - "3"
#|   - "4"
#| out-width: "100%"
#| label: "negbin-m-district-predicted"
#| fig-show: "hold"


ggdistrict <- function(predicted = predicted, party = FALSE) {
  
predicted %<>%
  # drop estimates from impossible values
      group_by(rowid, 
               #predicted, std.error, 
               estimate, conf.low, conf.high,
               same_party) %>% 
  mutate(sum = sum(new_member, second, third, fourth, fifth, sixth),
         more = ifelse(sum == 0, 1,0)) %>% 
    filter(sum < 2) %>% 
    pivot_longer(cols = c("new_member", "second", "third", "fourth", "fifth", "sixth", "more")) %>% 
    select(name, value) %>% 
    filter(value == 1) %>% 
    # clean up for presentation
    mutate(year_in_congress = name %>% 
             str_replace("more", "7\nor more") %>% 
             str_replace("sixth", "6") %>% 
             str_replace("fifth", "5") %>% 
             str_replace("fourth", "4") %>% 
             str_replace("third", "3") %>% 
             str_replace("second", "2") %>% 
             str_replace("new_member", " New\nmember") 
             ) %>% 
    ungroup()
  
# Ideally, we could plot against data, but there is so much variation that you can no longer distinguish differences in predicted values 
# predicted %<>% full_join(dcounts_tenure2 %>% mutate(predicted = NA))
  



p <- predicted %>%  
  ungroup() %>% 
  ggplot() + 
  aes(x = year_in_congress, 
            y = estimate, # predicted, 
      ymin = conf.low,# predicted - 1.96*std.error,
      ymax = conf.high) + 
  geom_pointrange(position =  position_dodge(width = -.3)  )  + 
  # geom_line() + # requires numeric...look to see how I did this on the other ones
  scale_fill_viridis_d(begin = 0, end = .6, option = "cividis") +
  scale_color_viridis_d(begin = 0, end = .6, option = "cividis") 

if(party){
p <- predicted %>%  
  mutate(same_party = as.logical(same_party)) %>% 
  ungroup() %>% 
  ggplot() + 
  aes(x = year_in_congress, 
            y = estimate, # predicted, 
      ymin = conf.low,# predicted - 1.96*std.error,
      ymax = conf.high, #predicted + 1.96*std.error,
      shape = same_party,
      color = same_party) + 
  geom_pointrange(position =  position_dodge(width = -.3)  )  + 
  scale_fill_viridis_d(begin = 0, end = .6, option = "cividis") +
  scale_color_viridis_d(begin = 0, end = .6, option = "cividis") 
}

return(p)
  
}


# dcounts_per_district %>% filter(District == "tennessee_1_1") |> View()
# dcounts_per_district %>% filter(District == "alabama_1_1") |> View()


# by year 
values <- tidyr::expand(dcounts_per_district,
                        new_member = new_member,
                        second = second,
                        third = third,
                        fourth = fourth,
                        fifth = fifth, 
                        sixth = sixth,
                        Legislator = "21376",
                        Year = "2016",
                        District = "alabama_1_1",
                        same_party = same_party
                   ) %>% 
  drop_na(same_party)

predicted <- predictions(m_district_cross,
                         newdata = values) 



# Cross-sectional predictions
predicted %>%
ggdistrict() +
  labs(#title = "Letters\nper district\n(cross-sectional)",
       x = "Years serving in Congress",
       y = "   Predicted letters\nper year per district\n(cross-sectional)",
       fill = "",
       color = "",
       shape = "") 



# Predictions with the party of the prior representative

predicted <- predictions(m_district_cross_party,
                         newdata = values) 

predicted %>%
  ggdistrict(party = TRUE) + 
  labs(# title = "",
       x = "Years serving in Congress",
       y = "   Predicted letters\nper year per district\n(cross-sectional)",
       fill = "",
       color = "Same party",
       shape = "Same party") 




# diff in diff plot

predicted <- predictions(m_district_dnd,
                         newdata = values) 


predicted %>%
ggdistrict() +
      geom_line(aes(x = as.numeric(year_in_congress %>% str_replace(" N", "1") %>% str_sub(1,1) ))) + 
  labs(#title = "Letters\nper district\n(difference-in-differences)",
       x = "Years serving in Congress",
       y = "    Predicted letters\nper year per district\n(difference-in-differneces)",
       fill = "",
       color = "",
       shape = "")



# Predictions with the Same party  

predicted <- predictions(m_district_dnd_party,
                         newdata = values) 


# diff in diff plot
predicted %>%
  ggdistrict(party = TRUE) +
        geom_line(aes(x = as.numeric(year_in_congress %>% str_replace(" N", "1") %>% str_sub(1,1) ))) + 
  labs(#title = "Letters Per District\n(difference-in-differences)",
       x = "Years serving in Congress",
       y = "   Predicted letters\nper year per district\n(difference-in-differences)",
       fill = "",
       color = "Same party",
       shape = "Same party")
```




### Total Per District Predictions (House only)

- Figures: `figs/negbin-m-district-predicted-house-[1:2].png`

```{r}
#| layout-ncol: 2
#| fig-height: 3
#| fig-cap: "figs/negbin-m-district-predicted-house-[1:2].png"
#| fig-subcap: 
#|   - "1"
#|   - "2"
#|   - "3"
#|   - "4"
#| out-width: "100%"
#| label: "negbin-m-district-predicted-house"
#| fig-show: "hold"




# diff in diff plot

predicted <- predictions(m_district_dnd_house,
                         newdata = values) 


predicted %>%
ggdistrict() +
        geom_line(aes(x = as.numeric(year_in_congress %>% str_replace(" N", "1") %>% str_sub(1,1) ))) + 
  labs(#title = "Letters\nper House district\n(difference-in-differences)",
       x = "Years serving in Congress",
       y = "    Predicted letters per year\nper House district\n(difference-in-differneces)",
       fill = "",
       color = "",
       shape = "")



# Predictions with the Same party  

predicted <- predictions(m_district_dnd_house_party,
                         newdata = values)

# diff in diff plot
predicted %>%
  ggdistrict(party = TRUE) +
        geom_line(aes(x = as.numeric(year_in_congress %>% str_replace(" N", "1") %>% str_sub(1,1) ))) + 
  labs(#title = "Letters\nper House district\n(difference-in-differences)",
       x = "Years serving in Congress",
       y = "   Predicted letters per year\nper House districte district\n(difference-in-differences)",
       fill = "",
       color = "Same party",
       shape = "Same party")
```





### Total Per District Predictions (Senate only)

- Figures: `figs/negbin-m-district-predicted-senate-[1:2].png`

```{r}
#| layout-ncol: 2
#| fig-height: 3
#| fig-cap: "figs/negbin-m-district-predicted-senate-[1:2].png"
#| fig-subcap: 
#|   - "1"
#|   - "2"
#|   - "3"
#|   - "4"
#| out-width: "100%"
#| label: "negbin-m-district-predicted-senate"
#| fig-show: "hold"


# Values for Senate seats 
values <- tidyr::expand(dcounts_per_district,
                        new_member = new_member,
                        second = second,
                        third = third,
                        fourth = fourth,
                        fifth = fifth, 
                        sixth = sixth,
                        Legislator = "49700",
                        Year = "2017",
                        District = "alabama_0",
                        same_party = same_party
                   ) %>% 
  drop_na(same_party)

# diff in diff plot

predicted <- predictions(m_district_dnd_senate,
                         newdata = values) 


predicted %>%
ggdistrict() +
        geom_line(aes(x = as.numeric(year_in_congress %>% str_replace(" N", "1") %>% str_sub(1,1) ))) + 
  labs(#title = "Letters per senator\n(difference-in-differences)",
       x = "Years serving in Congress",
       y = "   Predicted letters per year\nper Senator\n(difference-in-differneces)",
       fill = "",
       color = "",
       shape = "")



# Predictions with the Same party  

predicted <- predictions(m_district_dnd_senate_party,
                         newdata = values) 


# diff in diff plot
predicted %>%
  ggdistrict(party = TRUE) +
        geom_line(aes(x = as.numeric(year_in_congress %>% str_replace(" N", "1") %>% str_sub(1,1) ))) + 
  labs(#title = "Letters per senator\n(difference-in-differences)",
       x = "Years serving in Congress",
       y = "   Predicted letters per year\nper Senator\n(difference-in-differences)",
       fill = "",
       color = "Same party",
       shape = "Same party")
```

\clearpage


## Constituency Service Letters per District

The main results showing that replacing a more experienced legislator with a new legislator yields a substantial decrease in service to the district are robust to interacting all variables with the `same_party` variable. 
Cross-sectional effects get larger but more uncertain when data are subset to district years after turnover (as required for the `same_party` variable). Within-district effects become more uncertain, likely due to the much smaller number of observations where `same_party` can be observed. 


### Constituency Service District-level Coefficient Plots

Figures: `figs/negbin-m-district-con-[1:4].png`

1. cross-sectional 
2. cross-sectional with same-party variable 
3. diff-in-diff
4. diff-in-diff with same party variable

```{r}
#| layout-ncol: 2
#| fig-height: 4.5
#| fig-cap: "figs/negbin-m-district-con-[1:4].png"
#| fig-subcap: 
#|   - "1"
#|   - "2"
#|   - "3"
#|   - "4"
#| out-width: "100%"
#| label: "negbin-m-district-con"
#| fig-show: "hold"



m_district_con_cross <- fenegbin(perYear_con ~
  new_member + 
  second + third + fourth + fifth + sixth | Year,
cluster = "District",
data = dcounts_per_district)

if(testing){modelsummary::modelsummary(m_district_con_cross)}

coefplot(m_district_con_cross, horiz = T, drop = "(Intercept)|.theta", sub = "Reference = A member serving >6 years") 


m_district_con_cross_party <- fenegbin(perYear_con ~
  new_member*same_party + 
  second*same_party + third*same_party + fourth*same_party + fifth*same_party + sixth*same_party | Year,
cluster = "District",
data = dcounts_per_district)

if(testing){modelsummary::modelsummary(m_district_con_cross)}

coefplot(m_district_con_cross_party, horiz = T, drop = "(Intercept)|.theta", sub = "Reference = A member serving >6 years") 


# Diff in diff
m_district_con_dnd <- fenegbin(perYear_con ~
  new_member + #same_party + 
  second + third + fourth + fifth + sixth | 
    District + Year,
cluster = "District",
data = dcounts_per_district )

coefplot(m_district_con_dnd, horiz = T, drop = "(Intercept)|.theta", sub = "Reference = A member serving >6 years") 

# Diff in diff
m_district_con_dnd_party <- fenegbin(perYear_con ~
  new_member*same_party + 
  second*same_party + third*same_party + fourth*same_party + fifth*same_party + sixth*same_party | 
    District + Year,
cluster = "District",
data = dcounts_per_district )

coefplot(m_district_con_dnd_party, horiz = T, drop = "(Intercept)|.theta", sub = "Reference = A member serving >6 years") 



# Diff in diff
m_district_con_dnd_house <- fenegbin(perYear_con ~
  new_member + #same_party + 
  second + third + fourth + fifth + sixth | 
    District + Year,
cluster = "District",
data = dcounts_per_district |> filter(chamber == "House"))


# Diff in diff + party change var 
m_district_con_dnd_house_party <- fenegbin(perYear_con ~
  new_member*same_party + 
  second*same_party + third*same_party + fourth*same_party + fifth*same_party + sixth*same_party | 
    District + Year,
cluster = "District",
data = dcounts_per_district |> filter(chamber == "House"))

# Diff in diff
m_district_con_dnd_senate <- fenegbin(perYear_con ~
  new_member + #same_party + 
  second + third + fourth + fifth + sixth | 
    District + Year,
cluster = "District",
data = dcounts_per_district |> filter(chamber == "Senate"))


# Diff in diff + party change var 
m_district_con_dnd_senate_party <- fenegbin(perYear_con ~
  new_member*same_party + 
  second*same_party + third*same_party + fourth*same_party + fifth*same_party + sixth*same_party | 
    District + Year,
cluster = "District",
data = dcounts_per_district |> filter(chamber == "Senate"))

```

### Constituency Service Per District Tables

- Models: `models/models_district_con_negbin.Rdata` 

```{r models_district_con}
models_district_con <- list(
  "(1)" = m_district_con_cross,
  "(2)" = m_district_con_dnd,
  "(3)" = m_district_con_dnd_house,
  "(4)" = m_district_con_dnd_senate
)


rows <- tibble(
  term = c("Dependent variable", 
           "All districts",
           "House only",
           "Senate only"),
  `(1)` = c("Per year", 
            "âœ“", 
            "", 
            ""),
  `(2)` =c("Per year", 
           "âœ“", 
            "", 
            ""),
    `(3)` = c("Per year", 
            "", 
            "âœ“", 
            ""),
  `(4)` =c("Per year", 
           "", 
            "", 
            "âœ“")
)



# Check marks for controls 
attr(rows, 'position') <- c(0, 14:16)



modelsummary(models_district_con, 
             notes = list("Robust standard errors in parentheses, clustered by district.") ) 

beta <- m_district_con_dnd$coefficients %>%round(3) %>% as_tibble(rownames = "beta") %>% pivot_wider(names_from = beta)

beta_cross <- m_district_con_dnd$coefficients %>%round(3) %>% as_tibble(rownames = "beta") %>% pivot_wider(names_from = beta)


se <- m_district_con_dnd$se %>%round(3) %>% as_tibble(rownames = "se") %>% pivot_wider(names_from = se)

save(models_district_con, rows, cm, gm,  beta, se,
     file = here::here("models", "models_district_con_negbin.Rdata"))
```



- Models: `models/models_district_con_party_negbin.Rdata` 

```{r models_district_con_party}

models_district_con_party <- list(
  "(1)" = m_district_con_cross_party,
  "(2)" = m_district_con_dnd_party,
  "(3)" = m_district_con_dnd_house_party,
  "(4)" = m_district_con_dnd_senate_party
)


# Check marks for controls 
attr(rows, 'position') <- c(0, 28:31)



modelsummary(models_district_con_party, 
             notes = list("Robust standard errors in parentheses, clustered by district.") ) 

save(models_district_con_party, rows, cm, gm,  beta, se,
     file = here::here("models", "models_district_con_party_negbin.Rdata"))
```


### Constituency Service Per District Predictions 

- Figures: `figs/negbin-m-district-con-predicted-[1:4].png`

```{r}
#| layout-ncol: 2
#| fig-height: 3
#| fig-cap: "figs/negbin-m-district-con-predicted-[1:4].png"
#| fig-subcap: 
#|   - "1"
#|   - "2"
#|   - "3"
#|   - "4"
#| out-width: "100%"
#| label: "negbin-m-district-con-predicted"
#| fig-show: "hold"


ggdistrict <- function(predicted = predicted, party = FALSE) {
  
predicted %<>%
  # drop estimates from impossible values
      group_by(rowid, 
               #predicted, std.error, 
               estimate, conf.low, conf.high,
               same_party) %>% 
  mutate(sum = sum(new_member, second, third, fourth, fifth, sixth),
         more = ifelse(sum == 0, 1,0)) %>% 
    filter(sum < 2) %>% 
    pivot_longer(cols = c("new_member", "second", "third", "fourth", "fifth", "sixth", "more")) %>% 
    select(name, value) %>% 
    filter(value == 1) %>% 
    # clean up for presentation
    mutate(year_in_congress = name %>% 
             str_replace("more", "7\nor more") %>% 
             str_replace("sixth", "6") %>% 
             str_replace("fifth", "5") %>% 
             str_replace("fourth", "4") %>% 
             str_replace("third", "3") %>% 
             str_replace("second", "2") %>% 
             str_replace("new_member", " New\nmember") 
             ) %>% 
    ungroup()
  
# Ideally, we could plot against data, but there is so much variation that you can no longer distinguish differences in predicted values 
# predicted %<>% full_join(dcounts_tenure2 %>% mutate(predicted = NA))
  



p <- predicted %>%  
  ungroup() %>% 
  ggplot() + 
  aes(x = year_in_congress, 
            y = estimate, # predicted, 
      ymin = conf.low,# predicted - 1.96*std.error,
      ymax = conf.high) + 
  geom_pointrange(position =  position_dodge(width = -.3)  )  + 
  # geom_line() + # requires numeric...look to see how I did this on the other ones
  scale_fill_viridis_d(begin = 0, end = .6, option = "cividis") +
  scale_color_viridis_d(begin = 0, end = .6, option = "cividis") 

if(party){
p <- predicted %>%  
  mutate(same_party = as.logical(same_party)) %>% 
  ungroup() %>% 
  ggplot() + 
  aes(x = year_in_congress, 
            y = estimate, # predicted, 
      ymin = conf.low,# predicted - 1.96*std.error,
      ymax = conf.high, #predicted + 1.96*std.error,
      shape = same_party,
      color = same_party) + 
  geom_pointrange(position =  position_dodge(width = -.3)  )  + 
  scale_fill_viridis_d(begin = 0, end = .6, option = "cividis") +
  scale_color_viridis_d(begin = 0, end = .6, option = "cividis") 
}

return(p)
  
}


# dcounts_per_district %>% filter(District == "tennessee_1_1") |> View()
# dcounts_per_district %>% filter(District == "alabama_1_1") |> View()


# by year 
values <- tidyr::expand(dcounts_per_district,
                        new_member = new_member,
                        second = second,
                        third = third,
                        fourth = fourth,
                        fifth = fifth, 
                        sixth = sixth,
                        Legislator = "21376",
                        Year = "2016",
                        District = "alabama_1_1",
                        same_party = same_party
                   ) %>% 
  drop_na(same_party)

predicted <- predictions(m_district_con_cross,
                         newdata = values) 



# Cross-sectional predictions
predicted %>%
ggdistrict() +
  labs(#title = "Letters\nper district\n(cross-sectional)",
       x = "Years serving in Congress",
       y = "   Predicted letters per year\n(constituency service only)\nper district\n(cross-sectional)",
       fill = "",
       color = "",
       shape = "") 



# Predictions with the party of the prior representative

predicted <- predictions(m_district_con_cross_party,
                         newdata = values) 

predicted %>%
  ggdistrict(party = TRUE) + 
  labs(#title = "Letters\nper district\n(cross-sectional)",
       x = "Years serving in Congress",
              y = "   Predicted letters per year\n(constituency service only)\nper district\n(cross-sectional)",
       fill = "",
       color = "Same party",
       shape = "Same party") 




# diff in diff plot

predicted <- predictions(m_district_con_dnd,
                         newdata = values) 


predicted %>%
ggdistrict() +
      geom_line(aes(x = as.numeric(year_in_congress %>% str_replace(" N", "1") %>% str_sub(1,1) ))) + 
  labs(#title = "Letters\nper district\n(difference-in-differences)",
       x = "Years serving in Congress",
              y = "   Predicted letters per year\n(constituency service only)\nper district\n(difference-in-differneces)",
       fill = "",
       color = "",
       shape = "")



# Predictions with the Same party  

predicted <- predictions(m_district_con_dnd_party,
                         newdata = values) 

# diff in diff plot
predicted %>%
  ggdistrict(party = TRUE) +
        geom_line(aes(x = as.numeric(year_in_congress %>% str_replace(" N", "1") %>% str_sub(1,1) ))) + 
  labs(#title = "Letters Per District\n(difference-in-differences)",
       x = "Years serving in Congress",
              y = "   Predicted letters per year\n(constituency service only)\nper district\n(difference-in-differences)",
       fill = "",
       color = "Same party",
       shape = "Same party")
```




### Constituency Service Per District Predictions (House only)

- Figures: `figs/negbin-m-district-con-predicted-house-[1:2].png`

```{r}
#| layout-ncol: 2
#| fig-height: 3
#| fig-cap: "figs/negbin-m-district-con-predicted-house-[1:2].png"
#| fig-subcap: 
#|   - "1"
#|   - "2"
#|   - "3"
#|   - "4"
#| out-width: "100%"
#| label: "negbin-m-district-con-predicted-house"
#| fig-show: "hold"




# diff in diff plot

predicted <- predictions(m_district_con_dnd_house,
                         newdata = values) 


predicted %>%
ggdistrict() +
        geom_line(aes(x = as.numeric(year_in_congress %>% str_replace(" N", "1") %>% str_sub(1,1) ))) + 
  labs(#title = "Letters\nper House district\n(difference-in-differences)",
       x = "Years serving in Congress",
              y = "   Predicted letters per year\n(constituency service only)\nper House district\n(difference-in-differneces)",
       fill = "",
       color = "",
       shape = "")



# Predictions with the Same party  

predicted <- predictions(m_district_con_dnd_house_party,
                         newdata = values) 

# diff in diff plot
predicted %>%
  ggdistrict(party = TRUE) +
        geom_line(aes(x = as.numeric(year_in_congress %>% str_replace(" N", "1") %>% str_sub(1,1) ))) + 
  labs(#title = "Letters\nper House district\n(difference-in-differences)",
       x = "Years serving in Congress",
              y = "   Predicted letters per year\n(constituency service only)\nper House district\n(difference-in-differences)",
       fill = "",
       color = "Same party",
       shape = "Same party")
```





### Constituency Service Per District Predictions (Senate only)

- Figures: `figs/negbin-m-district-con-predicted-senate-[1:2].png`

```{r}
#| layout-ncol: 2
#| fig-height: 3
#| fig-cap: "figs/negbin-m-district-con-predicted-senate-[1:2].png"
#| fig-subcap: 
#|   - "1"
#|   - "2"
#|   - "3"
#|   - "4"
#| out-width: "100%"
#| label: "negbin-m-district-con-predicted-senate"
#| fig-show: "hold"


# Values for Senate seats 
values <- tidyr::expand(dcounts_per_district,
                        new_member = new_member,
                        second = second,
                        third = third,
                        fourth = fourth,
                        fifth = fifth, 
                        sixth = sixth,
                        Legislator = "49700",
                        Year = "2017",
                        District = "alabama_0",
                        same_party = same_party
                   ) %>% 
  drop_na(same_party)

# diff in diff plot

predicted <- predictions(m_district_con_dnd_senate,
                         newdata = values) 


predicted %>%
ggdistrict() +
        geom_line(aes(x = as.numeric(year_in_congress %>% str_replace(" N", "1") %>% str_sub(1,1) ))) + 
  labs(#title = "Letters per senator\n(difference-in-differences)",
       x = "Years serving in Congress",
              y = "   Predicted letters per year\n(constituency service only)\nper senator\n(difference-in-differneces)",
       fill = "",
       color = "",
       shape = "")



# Predictions with the Same party  

predicted <- predictions(m_district_con_dnd_senate_party,
                         newdata = values) 
# diff in diff plot
predicted %>%
  ggdistrict(party = TRUE) +
        geom_line(aes(x = as.numeric(year_in_congress %>% str_replace(" N", "1") %>% str_sub(1,1) ))) + 
  labs(#title = "Letters per senator\n(difference-in-differences)",
       x = "Years serving in Congress",
              y = "   Predicted letters per year\n(constituency service only)\nper senator\n(difference-in-differences)",
       fill = "",
       color = "Same party",
       shape = "Same party")
```


\clearpage


## Policy Letters per District

The main results showing that replacing a more experienced legislator with a new legislator yields a substantial decrease in policy work to the district are robust to interacting all variables with the `same_party` variable. 
Cross-sectional effects get larger but more uncertain when data are subset to district years after turnover (as required for the `same_party` variable). Within-district effects become more uncertain, likely due to the much smaller number of observations where `same_party` can be observed. 


### Policy District-level Coefficient Plots

Figures: `figs/negbin-m-district-policy-[1:4].png`

1. cross-sectional 
2. cross-sectional with same-party variable 
3. diff-in-diff
4. diff-in-diff with Same party variable

```{r}
#| layout-ncol: 2
#| fig-height: 4.5
#| fig-cap: "figs/negbin-m-district-policy-[1:4].png"
#| fig-subcap: 
#|   - "1"
#|   - "2"
#|   - "3"
#|   - "4"
#| out-width: "100%"
#| label: "negbin-m-district-policy"
#| fig-show: "hold"



m_district_policy_cross <- fenegbin(perYear_policy ~
  new_member + 
  second + third + fourth + fifth + sixth | Year,
cluster = "District",
data = dcounts_per_district)

if(testing){modelsummary::modelsummary(m_district_policy_cross)}

coefplot(m_district_policy_cross, horiz = T, drop = "(Intercept)|.theta", sub = "Reference = A member serving >6 years") 


m_district_policy_cross_party <- fenegbin(perYear_policy ~
  new_member*same_party + 
  second*same_party + third*same_party + fourth*same_party + fifth*same_party + sixth*same_party | Year,
cluster = "District",
data = dcounts_per_district)

if(testing){modelsummary::modelsummary(m_district_policy_cross)}

coefplot(m_district_policy_cross_party, horiz = T, drop = "(Intercept)|.theta", sub = "Reference = A member serving >6 years") 


# Diff in diff
m_district_policy_dnd <- fenegbin(perYear_policy ~
  new_member + #same_party + 
  second + third + fourth + fifth + sixth | 
    District + Year,
cluster = "District",
data = dcounts_per_district )

coefplot(m_district_policy_dnd, horiz = T, drop = "(Intercept)|.theta", sub = "Reference = A member serving >6 years") 

# Diff in diff
m_district_policy_dnd_party <- fenegbin(perYear_policy ~
  new_member*same_party + 
  second*same_party + third*same_party + fourth*same_party + fifth*same_party + sixth*same_party | 
    District + Year,
cluster = "District",
data = dcounts_per_district )

coefplot(m_district_policy_dnd_party, horiz = T, drop = "(Intercept)|.theta", sub = "Reference = A member serving >6 years") 



# Diff in diff
m_district_policy_dnd_house <- fenegbin(perYear_policy ~
  new_member + #same_party + 
  second + third + fourth + fifth + sixth | 
    District + Year,
cluster = "District",
data = dcounts_per_district |> filter(chamber == "House"))


# Diff in diff + party change var 
m_district_policy_dnd_house_party <- fenegbin(perYear_policy ~
  new_member*same_party + 
  second*same_party + third*same_party + fourth*same_party + fifth*same_party + sixth*same_party | 
    District + Year,
cluster = "District",
data = dcounts_per_district |> filter(chamber == "House"))

# Diff in diff
m_district_policy_dnd_senate <- fenegbin(perYear_policy ~
  new_member + #same_party + 
  second + third + fourth + fifth + sixth | 
    District + Year,
cluster = "District",
data = dcounts_per_district |> filter(chamber == "Senate"))


# Diff in diff + party change var 
m_district_policy_dnd_senate_party <- fenegbin(perYear_policy ~
  new_member*same_party + 
  second*same_party + third*same_party + fourth*same_party + fifth*same_party + sixth*same_party | 
    District + Year,
cluster = "District",
data = dcounts_per_district |> filter(chamber == "Senate"))

```

### Policy Per District Tables

- Models: `models/models_district_policy_negbin.Rdata` 

```{r models_district_policy}
models_district_policy <- list(
  "(1)" = m_district_policy_cross,
  "(2)" = m_district_policy_dnd,
  "(3)" = m_district_policy_dnd_house,
  "(4)" = m_district_policy_dnd_senate
)


rows <- tibble(
  term = c("Dependent variable", 
           "All districts",
           "House only",
           "Senate only"),
  `(1)` = c("Per year", 
            "âœ“", 
            "", 
            ""),
  `(2)` =c("Per year", 
           "âœ“", 
            "", 
            ""),
    `(3)` = c("Per year", 
            "", 
            "âœ“", 
            ""),
  `(4)` =c("Per year", 
           #"âœ“", 
           "", 
            "", 
            "âœ“")
)



# Check marks for controls 
attr(rows, 'position') <- c(0, 14:16)



modelsummary(models_district_policy, 
             notes = list("Robust standard errors in parentheses, clustered by district.") ) 

beta <- m_district_policy_dnd$coefficients %>%round(3) %>% as_tibble(rownames = "beta") %>% pivot_wider(names_from = beta)

beta_cross <- m_district_policy_dnd$coefficients %>%round(3) %>% as_tibble(rownames = "beta") %>% pivot_wider(names_from = beta)


se <- m_district_policy_dnd$se %>%round(3) %>% as_tibble(rownames = "se") %>% pivot_wider(names_from = se)

save(models_district_policy, rows, cm, gm,  beta, se,
     file = here::here("models", "models_district_policy_negbin.Rdata"))
```


- Models: `models/models_district_policy_party_negbin.Rdata` 

```{r models_district_policy_party}

models_district_policy_party <- list(
  "(1)" = m_district_policy_cross_party,
  "(2)" = m_district_policy_dnd_party,
  "(3)" = m_district_policy_dnd_house_party,
  "(4)" = m_district_policy_dnd_senate_party
)

# Check marks for controls 
attr(rows, 'position') <- c(0, 28:31)

modelsummary(models_district_policy_party, 
             notes = list("Robust standard errors in parentheses, clustered by district.") ) 

save(models_district_policy_party, rows, cm, gm,  beta, se,
     file = here::here("models", "models_district_policy_party_negbin.Rdata"))
```

### Policy Per District Predictions 

- Figures: `figs/negbin-m-district-policy-predicted-[1:4].png`

```{r}
#| layout-ncol: 2
#| fig-height: 3
#| fig-cap: "figs/negbin-m-district-policy-predicted-[1:4].png"
#| fig-subcap: 
#|   - "1"
#|   - "2"
#|   - "3"
#|   - "4"
#| out-width: "100%"
#| label: "negbin-m-district-policy-predicted"
#| fig-show: "hold"


ggdistrict <- function(predicted = predicted, party = FALSE) {
  
predicted %<>%
  # drop estimates from impossible values
      group_by(rowid, 
               #predicted, std.error, 
               estimate, conf.low, conf.high,
               same_party) %>% 
  mutate(sum = sum(new_member, second, third, fourth, fifth, sixth),
         more = ifelse(sum == 0, 1,0)) %>% 
    filter(sum < 2) %>% 
    pivot_longer(cols = c("new_member", "second", "third", "fourth", "fifth", "sixth", "more")) %>% 
    select(name, value) %>% 
    filter(value == 1) %>% 
    # clean up for presentation
    mutate(year_in_policygress = name %>% 
             str_replace("more", "7\nor more") %>% 
             str_replace("sixth", "6") %>% 
             str_replace("fifth", "5") %>% 
             str_replace("fourth", "4") %>% 
             str_replace("third", "3") %>% 
             str_replace("second", "2") %>% 
             str_replace("new_member", " New\nmember") 
             ) %>% 
    ungroup()
  
# Ideally, we could plot against data, but there is so much variation that you can no longer distinguish differences in predicted values 
p <- predicted %>%  
  ungroup() %>% 
  ggplot() + 
  aes(x = year_in_policygress, 
            y = estimate, # predicted, 
      ymin = conf.low,# predicted - 1.96*std.error,
      ymax = conf.high) + 
  geom_pointrange(position =  position_dodge(width = -.3)  )  + 
  # geom_line() + # requires numeric...look to see how I did this on the other ones
  scale_fill_viridis_d(begin = 0, end = .6, option = "cividis") +
  scale_color_viridis_d(begin = 0, end = .6, option = "cividis") 

if(party){
p <- predicted %>%  
  mutate(same_party = as.logical(same_party)) %>% 
  ungroup() %>% 
  ggplot() + 
  aes(x = year_in_policygress, 
            y = estimate, # predicted, 
      ymin = conf.low,# predicted - 1.96*std.error,
      ymax = conf.high, #predicted + 1.96*std.error,
      shape = same_party,
      color = same_party) + 
  geom_pointrange(position =  position_dodge(width = -.3)  )  + 
  scale_fill_viridis_d(begin = 0, end = .6, option = "cividis") +
  scale_color_viridis_d(begin = 0, end = .6, option = "cividis") 
}

return(p)
  
}


# dcounts_per_district %>% filter(District == "tennessee_1_1") |> View()
# dcounts_per_district %>% filter(District == "alabama_1_1") |> View()


# by year 
values <- tidyr::expand(dcounts_per_district,
                        new_member = new_member,
                        second = second,
                        third = third,
                        fourth = fourth,
                        fifth = fifth, 
                        sixth = sixth,
                        Legislator = "21376",
                        Year = "2016",
                        District = "alabama_1_1",
                        same_party = same_party
                   ) %>% 
  drop_na(same_party)

predicted <- predictions(m_district_policy_cross,
                         newdata = values) 


# Cross-sectional predictions
predicted %>%
ggdistrict() +
  labs(#title = "Letters\nper district\n(cross-sectional)",
       x = "Years serving in Congress",
       y = "   Predicted letters per year\n(policy only)\nper district\n(cross-sectional)",
       fill = "",
       color = "",
       shape = "") 



# Predictions with the party of the prior representative
predicted <- predictions(m_district_policy_cross_party,
                         newdata = values) 

predicted %>%
  ggdistrict(party = TRUE) + 
  labs(#title = "Letters\nper district\n(cross-sectional)",
       x = "Years serving in Congress",
              y = "   Predicted letters per year\n(policy only)\nper district\n(cross-sectional)",
       fill = "",
       color = "Same party",
       shape = "Same party") 




# diff in diff plot
predicted <- predictions(m_district_policy_dnd,
                         newdata = values) 


predicted %>%
ggdistrict() +
      geom_line(aes(x = as.numeric(year_in_policygress %>% str_replace(" N", "1") %>% str_sub(1,1) ))) + 
  labs(#title = "Letters\nper district\n(difference-in-differences)",
       x = "Years serving in Congress",
              y = "   Predicted letters per year\n(policy only)\nper district\n(difference-in-differneces)",
       fill = "",
       color = "",
       shape = "")



# Predictions with the Same party  
predicted <- predictions(m_district_policy_dnd_party,
                         newdata = values)

# diff in diff plot
predicted %>%
  ggdistrict(party = TRUE) +
        geom_line(aes(x = as.numeric(year_in_policygress %>% str_replace(" N", "1") %>% str_sub(1,1) ))) + 
  labs(#title = "Letters Per District\n(difference-in-differences)",
       x = "Years serving in Congress",
              y = "   Predicted letters per year\n(policy only)\nper district\n(difference-in-differences)",
       fill = "",
       color = "Same party",
       shape = "Same party")
```




### Policy Per District Predictions (House only)

- Figures: `figs/negbin-m-district-policy-predicted-house-[1:2].png`

```{r}
#| layout-ncol: 2
#| fig-height: 3
#| fig-cap: "figs/negbin-m-district-policy-predicted-house-[1:2].png"
#| fig-subcap: 
#|   - "1"
#|   - "2"
#|   - "3"
#|   - "4"
#| out-width: "100%"
#| label: "negbin-m-district-policy-predicted-house"
#| fig-show: "hold"




# diff in diff plot
predicted <- predictions(m_district_policy_dnd_house,
                         newdata = values)


predicted %>%
ggdistrict() +
        geom_line(aes(x = as.numeric(year_in_policygress %>% str_replace(" N", "1") %>% str_sub(1,1) ))) + 
  labs(#title = "Letters\nper House district\n(difference-in-differences)",
       x = "Years serving in Congress",
              y = "   Predicted letters per year\n(policy only)\nper House district\n(difference-in-differneces)",
       fill = "",
       color = "",
       shape = "")



# Predictions with the Same party  
predicted <- predictions(m_district_policy_dnd_house_party,
                         newdata = values)
# diff in diff plot
predicted %>%
  ggdistrict(party = TRUE) +
        geom_line(aes(x = as.numeric(year_in_policygress %>% str_replace(" N", "1") %>% str_sub(1,1) ))) + 
  labs(#title = "Letters\nper House district\n(difference-in-differences)",
       x = "Years serving in Congress",
              y = "   Predicted letters per year\n(policy only)\nper House district\n(difference-in-differences)",
       fill = "",
       color = "Same party",
       shape = "Same party")
```





### Policy Per District Predictions (Senate only)

- Figures: `figs/negbin-m-district-policy-predicted-senate-[1:2].png`

```{r}
#| layout-ncol: 2
#| fig-height: 3
#| fig-cap: "figs/negbin-m-district-policy-predicted-senate-[1:2].png"
#| fig-subcap: 
#|   - "1"
#|   - "2"
#|   - "3"
#|   - "4"
#| out-width: "100%"
#| label: "negbin-m-district-policy-predicted-senate"
#| fig-show: "hold"


# Values for Senate seats 
values <- tidyr::expand(dcounts_per_district,
                        new_member = new_member,
                        second = second,
                        third = third,
                        fourth = fourth,
                        fifth = fifth, 
                        sixth = sixth,
                        Legislator = "49700",
                        Year = "2017",
                        District = "alabama_0",
                        same_party = same_party
                   ) %>% 
  drop_na(same_party)

# diff in diff plot
predicted <- predictions(m_district_policy_dnd_senate,
                         newdata = values) 


predicted %>%
ggdistrict() +
        geom_line(aes(x = as.numeric(year_in_policygress %>% str_replace(" N", "1") %>% str_sub(1,1) ))) + 
  labs(#title = "Letters per senator\n(difference-in-differences)",
       x = "Years serving in Congress",
              y = "   Predicted letters per year\n(policy only)\nper senator\n(difference-in-differneces)",
       fill = "",
       color = "",
       shape = "")



# Predictions with the Same party  
predicted <- predictions(m_district_policy_dnd_senate_party,
                         newdata = values) 

# diff in diff plot
predicted %>%
  ggdistrict(party = TRUE) +
        geom_line(aes(x = as.numeric(year_in_policygress %>% str_replace(" N", "1") %>% str_sub(1,1) ))) + 
  labs(#title = "Letters per senator\n(difference-in-differences)",
       x = "Years serving in Congress",
              y = "   Predicted letters per year\n(policy only)\nper senator\n(difference-in-differences)",
       fill = "",
       color = "Same party",
       shape = "Same party")
```


\clearpage

# Model Results:  Spillover Effects Robustness Check

This is a robustness check for an observable implication of demand-driven behavior. If variation in constituent demand drives variation in legislator behavior (specifically a preference for more senior members), then we should observe spillover effects on the rest of a delegation when an experienced member is replaced with a new member. That is, if people demand more from experienced members, people should redirect demand to the next most experienced member who represents them.

```{r spillover-data}

# new IVs: new_senator, new_proportion, new_one

dcounts_spillover <- dcounts_per_district %>% 
  # FIRST, identify districts with new members 
  group_by(state, Year) %>% 
  # size of the delegation 
  add_count(name = "n_delegation") %>% 
  mutate(
    # new IVs:
    new_senator = ifelse(chamber == "Senate" & new_member == 1, 1, NA), 
    new_proportion = sum(new_member)/n_delegation, 
    new_one = ifelse(new_member == 1, 1, NA)
  ) %>% 
  fill(new_senator, .direction = "updown") %>% 
  fill(new_one, .direction = "updown") %>% 
  mutate(new_senator =   replace_na(new_senator, 0),
         new_one = replace_na(new_one, 0) 
  ) %>% 
  group_by(state, Year, chamber) %>% 
  arrange(year, state) 

  # THEN WE DROP ALL OF THE NEW MEMBERS 
dcounts_spillover %<>%   filter(new_member == 0)  


# # inspect data 
# dcounts_spillover |> select(Year, state, chamber, new_member, new_one, new_senator, new_proportion, perYear) |> ungroup() |>
#   #filter(new_senator ==1) |>  
#   #count(new_senator, new_member) |> 
#   kablebox_long()
#     

```


<!-- NOT WORTH PLOTTING 
### Spillover Coefficient Plots

Figures: `figs/negbin-m-spillover-[1:3].png`

1. diff-in-diff, at least one **new Senator** in the delegation effect
2. diff-in-diff, **proportion** of new legislators in the delegation effect **on Senators**
3. diff-in-diff, at least one **new legislator** in the delegation effect **on Senators**
--> 

### Spillover Effect: Total

```{r}
#| layout-ncol: 2
#| fig-height: 4.5
#| fig-cap: "figs/negbin-m-spillover-[1:3].png"
#| fig-subcap: 
#|   - "1"
#|   - "2"
#|   - "3"
#| out-width: "100%"
#| label: "negbin-m-spillover"
#| fig-show: "hold"

m_spillover <- fenegbin(perYear ~
  new_senator  | Year + District,
cluster = "District",
data = dcounts_spillover)

# coefplot(m_spillover, horiz = T, drop = "(Intercept)|.theta", sub = "") 

m_spillover_proportion <- fenegbin(perYear ~
  new_proportion  | Year + District,
cluster = "District",
data = dcounts_spillover |> filter(chamber == "Senate"))

# coefplot(m_spillover_proportion, horiz = T, drop = "(Intercept)|.theta", sub = "") 

m_spillover_new_one <- fenegbin(perYear ~
  new_one  | Year + District,
cluster = "District",
data = dcounts_spillover |> filter(chamber == "Senate"))

# coefplot(m_spillover_new_one, horiz = T, drop = "(Intercept)|.theta", sub = "") 

```


- Models: `models/models_spillover_negbin.Rdata`

```{r models_spillover}
models_spillover <- list(
  "(1)" = m_spillover,
  "(2)" = m_spillover_proportion,
  "(3)" = m_spillover_new_one
)


rows <- tibble(
  term = c("Dependent variable", 
           "All districts",
           "Senate only"),
  `(1)` = c("Per year", 
            "âœ“", 
            ""),
  `(2)` =c("Per year", 
            "", 
           "âœ“"),
    `(3)` = c("Per year", 
            "", 
            "âœ“")
)



# Check marks for controls 
attr(rows, 'position') <- c(0, 9:11)


modelsummary(models_spillover,
             notes = list("Robust standard errors in parentheses, clustered by district.") ) 

save(models_spillover, rows, cm, gm,  #beta, se,
     file = here::here("models", "models_spillover_negbin.Rdata"))
```

### Spillover Effect: Constituency Service 

```{r}
#| layout-ncol: 2
#| fig-height: 4.5
#| fig-cap: "figs/negbin-m-spillover-con-[1:3].png"
#| fig-subcap: 
#|   - "1"
#|   - "2"
#|   - "3"
#| out-width: "100%"
#| label: "negbin-m-spillover-con"
#| fig-show: "hold"

m_spillover_con <- fenegbin(perYear_con ~
  new_senator  | Year + District,
cluster = "District",
data = dcounts_spillover)

# coefplot(m_spillover, horiz = T, drop = "(Intercept)|.theta", sub = "") 

m_spillover_con_proportion <- fenegbin(perYear_con ~
  new_proportion  | Year + District,
cluster = "District",
data = dcounts_spillover |> filter(chamber == "Senate"))

# coefplot(m_spillover_proportion, horiz = T, drop = "(Intercept)|.theta", sub = "") 

m_spillover_con_new_one <- fenegbin(perYear_con ~
  new_one  | Year + District,
cluster = "District",
data = dcounts_spillover |> filter(chamber == "Senate"))

# coefplot(m_spillover_new_one, horiz = T, drop = "(Intercept)|.theta", sub = "") 

```


- Models: `models/models_spillover_negbin.Rdata`

```{r models_spillover_con}
models_spillover_con <- list(
  "(1)" = m_spillover_con,
  "(2)" = m_spillover_con_proportion,
  "(3)" = m_spillover_con_new_one
)


rows <- tibble(
  term = c("Dependent variable", 
           "All districts",
           "Senate only"),
  `(1)` = c("Per year (CS-only)", 
            "âœ“", 
            ""),
  `(2)` =c("Per year (CS-only)", 
            "", 
           "âœ“"),
    `(3)` = c("Per year (CS-only)", 
            "", 
            "âœ“")
)



# Check marks for controls 
attr(rows, 'position') <- c(0, 9:11)


modelsummary(models_spillover_con,
             notes = list("Robust standard errors in parentheses, clustered by district.") ) 

save(models_spillover_con, rows, cm, gm,  #beta, se,
     file = here::here("models", "models_spillover_con_negbin.Rdata"))
```



### Spillover Effect: Policy

```{r}
#| layout-ncol: 2
#| fig-height: 4.5
#| fig-cap: "figs/negbin-m-spillover-policy-[1:3].png"
#| fig-subcap: 
#|   - "1"
#|   - "2"
#|   - "3"
#| out-width: "100%"
#| label: "negbin-m-spillover-policy"
#| fig-show: "hold"

m_spillover_policy <- fenegbin(perYear_policy ~
  new_senator  | Year + District,
cluster = "District",
data = dcounts_spillover)

# coefplot(m_spillover, horiz = T, drop = "(Intercept)|.theta", sub = "") 

m_spillover_policy_proportion <- fenegbin(perYear_policy ~
  new_proportion  | Year + District,
cluster = "District",
data = dcounts_spillover |> filter(chamber == "Senate"))

# coefplot(m_spillover_proportion, horiz = T, drop = "(Intercept)|.theta", sub = "") 

m_spillover_policy_new_one <- fenegbin(perYear_policy ~
  new_one  | Year + District,
cluster = "District",
data = dcounts_spillover |> filter(chamber == "Senate"))

# coefplot(m_spillover_new_one, horiz = T, drop = "(Intercept)|.theta", sub = "") 

```


- Models: `models/models_spillover_negbin.Rdata`

```{r models_spillover_policy}
models_spillover_policy <- list(
  "(1)" = m_spillover_policy,
  "(2)" = m_spillover_policy_proportion,
  "(3)" = m_spillover_policy_new_one
)


rows <- tibble(
  term = c("Dependent variable", 
           "All districts",
           "Senate only"),
  `(1)` = c("Per year (Policy-only)", 
            "âœ“", 
            ""),
  `(2)` =c("Per year (Policy-only)", 
            "", 
           "âœ“"),
    `(3)` = c("Per year (Policy-only)", 
            "", 
            "âœ“")
)



# Check marks for controls 
attr(rows, 'position') <- c(0, 9:11)


modelsummary(models_spillover_policy,
             notes = list("Robust standard errors in parentheses, clustered by district.") ) 

save(models_spillover_policy, rows, cm, gm,  #beta, se,
     file = here::here("models", "models_spillover_policy_negbin.Rdata"))
```

# Computing Environment: 

```{r}
sessionInfo()
```